config:
  aws:region: us-east-2
  aws:profile: staging
  rds:applyImmediately: true
  rds:backupWindow: “09:00-09:45”
  rds:deletionProtection: false
  rds:env: staging
  rds:maintenanceWindow: “tue:10:00-tue:10:30"
  rds:parameterGroupFamily: aurora-postgresql14
  rds:port: 5432
  rds:skipFinalSnapshot: true
  rds:services:
    # `name` here is also the kubernetes namespace which the service lives in for the k8s resource creation
    # left this as manual config entries so that we can provision databases based on need of service
    # rather than “provision for all service namespaces”
    calendar-service:
      database: calendardb
      databaseUser: calendaruser
      # instanceClass: t3.medium #defaults to t3.medium but you can modify it here per service
      name: calendar-service
function createAuroraCluster(args: CreateAuroraClusterInput): rds.Cluster {
  return new rds.Cluster(
    `${config.env}-${args.service.name}`,
    {
      // allocatedStorage: 1, //unassigned, discuss
      allowMajorVersionUpgrade: false, // discuss
      applyImmediately: config.applyImmediately,
      // backtrackWindow: 259200, //unassigned, discuss
      availabilityZones: config.vpcZoneNames,
      backupRetentionPeriod: 14,
      clusterIdentifier: `${config.env}-${args.service.name}`,
      copyTagsToSnapshot: true,
      databaseName: `${args.service.database}`,
      dbInstanceParameterGroupName: args.parameterGroup.name,
      dbSubnetGroupName: args.dbSubnetGroup.apply(
        (dbSG: rds.SubnetGroup) => dbSG.id,
      ),
      deletionProtection: false,
      enableHttpEndpoint: false,
      enabledCloudwatchLogsExports: [‘postgresql’],
      engine: rds.EngineType.AuroraPostgresql,
      engineMode: rds.EngineMode.Provisioned,
      engineVersion: ‘14.3’,
      iamDatabaseAuthenticationEnabled: false,
      // iamRoles: [],
      // iops: 1, //unassigned, discuss
      masterPassword: args.ssmData.secretVersion.secretString.apply(
        (secret: string | undefined) =>
          (JSON.parse(secret || ‘{}’) as Secrets).password,
      ),
      masterUsername: args.service.databaseUser,
      port: 5432,
      preferredMaintenanceWindow: config.maintenanceWindow,
      preferredBackupWindow: config.backupWindow,
      skipFinalSnapshot: true, // discuss
      storageEncrypted: true,
      // storageType: io1, //default and only value allowed is io1 - required for multi AZ
      vpcSecurityGroupIds: [args.dbSecurityGroup],
    },
    {
      deleteBeforeReplace: true,
      additionalSecretOutputs: [‘masterUsername’, ‘masterPassword’],
    },
  );
}
      new rds.SubnetGroup(`${config.env}-${args.serviceName}-subnet-group`, {
        subnetIds: subnets,
        tags: {
          Environment: config.env,
          Service: args.serviceName,
        },
      }),
new rds.ParameterGroup(
    `aurora-rds-${config.env}-${args.service.name}-parameter-group`,
    {
      description: `${config.env} ${args.service.name} postgres parameter group`,
      family: config.parameterGroupFamily,
      parameters: [
        {
          // Lists shared libraries to preload into server.
          name: ‘shared_preload_libraries’,
          value: ‘pg_stat_statements,pgaudit,pg_cron’,
          applyMethod: ‘pending-reboot’,
        },
        {
          // Specifies which classes of statements will be logged by session audit logging
          name: ‘pgaudit.log’,
          value: ‘all,-misc’,
          applyMethod: ‘pending-reboot’,
        },
        {
          // Specifies the log level that will be used for log entries.
          name: ‘pgaudit.log_level’,
          value: ‘notice’,
          applyMethod: ‘pending-reboot’,
        },
        {
          // Specifies the log level that will be used for log entries.
          name: ‘pgaudit.role’,
          value: ‘rds_pgaudit’,
          applyMethod: ‘pending-reboot’,
        },
        {
          // Specifies the base table for cron extension
          name: ‘cron.database_name’,
          value: args.service.database,
          applyMethod: ‘pending-reboot’,
        },
        {
          // Logs long lock waits.
          name: ‘log_lock_waits’,
          value: ‘1’,
          applyMethod: ‘pending-reboot’,
        },
        {
          // (ms) Sets the minimum execution time above which statements will be logged.
          name: ‘log_min_duration_statement’,
          // Log query that works 1 sec or longer
          value: ‘1000’,
          applyMethod: ‘pending-reboot’,
        },
        {
          // Sets the destination for server log output.
          name: ‘log_destination’,
          value: ‘csvlog’,
          applyMethod: ‘pending-reboot’,
        },
      ],
      tags: {
        Environment: config.env,
        Service: args.service.name,
      },
    },
  );
   new rds.ClusterRoleAssociation(
    `aurora-rds-${config.env}-${args.service.name}`,
    {
      dbClusterIdentifier: args.auroraCluster.id,
      featureName: ‘s3Export’,
      roleArn: args.role.arn,
    },
    {
      deleteBeforeReplace: true,
    },
  );
    const clusterInstance = new rds.ClusterInstance(
    `aurora-rds-${config.env}-${args.service.name}-cluster-instance`,
    {
      applyImmediately: config.applyImmediately,
      clusterIdentifier: args.auroraCluster.id,
      copyTagsToSnapshot: true,
      dbParameterGroupName: args.auroraCluster.dbClusterParameterGroupName,
      engine: rds.EngineType.AuroraPostgresql,
      engineVersion: args.auroraCluster.engineVersion,
      identifier: `${config.env}-${args.service.name}-cluster-instance`,
      instanceClass:
        args.service.instanceClass === undefined
          ? rds.InstanceType.T3_Medium
          : args.service.instanceClass,
      preferredBackupWindow: config.backupWindow,
      preferredMaintenanceWindow: config.maintenanceWindow,
      publiclyAccessible: false,
      tags: {
        Environment: config.env,
        Service: args.service.name,
      },
    },
    {
      deleteBeforeReplace: true,
    },
  );
  const readOnlyClusterInstance = new rds.ClusterInstance(
    `aurora-rds-${config.env}-${args.service.name}-cluster-readonly-instance`,
    {
      applyImmediately: config.applyImmediately,
      clusterIdentifier: args.auroraCluster.id,
      copyTagsToSnapshot: true,
      dbParameterGroupName: args.auroraCluster.dbClusterParameterGroupName,
      engine: rds.EngineType.AuroraPostgresql,
      engineVersion: args.auroraCluster.engineVersion,
      identifier: `${config.env}-${args.service.name}-cluster-readonly-instance`,
      instanceClass:
        args.service.instanceClass === undefined
          ? rds.InstanceType.T3_Medium
          : args.service.instanceClass,
      preferredBackupWindow: config.backupWindow,
      preferredMaintenanceWindow: config.maintenanceWindow,
      publiclyAccessible: false,
      tags: {
        Environment: config.env,
        Service: args.service.name,
      },
    },
    {
      deleteBeforeReplace: true,
      dependsOn: clusterInstance,
    },
  );



  old pass - Sb5Jd7nUJQ39bqvTM
  new pass - 8GolZzodGcXebXZB